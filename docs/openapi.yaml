openapi: 3.0.1

info:
  description: Exchange messages between users
  title: Chatty API
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Development environment
  - url: https://api.yawoen.com.br/chatty
    description: Production server

paths:
  /users:
    post:
      summary: Create a user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The user object representation.
          headers:
            Location:
              description: The URI reference for the newly created user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The user object is bad formatted, missing attributes or has invalid values.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: The username is already taken by another user.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Unexpected Error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /users/{id}:
    parameters:
      - description: The user unique identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      summary: Get a user by id.
      tags:
        - Users
      responses:
        '200':
          description: The user object representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: The user was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Unexpected Error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /messages:
    post:
      summary: Send message from one user to another.
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          headers:
            Location:
              description: The URI reference for the newly created message.
              schema:
                type: string
          description: The message object representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: |
            The request is missing required attributes or the values are
            invalid. For example, body exceeds max length.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: The recipient or the sender does not exist.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Unexpected Error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'


    get:
      summary: List the messages a user has received.
      tags:
        - Messages
      parameters:
        - description: The recipient user id.
          in: query
          name: to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The message listing representation.
          content:
            application/json:
              schema:
                properties:
                  messages:
                    description: The messages user had received.
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          description: The request is missing required attributes.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: The user does not exist.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Unexpected error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /message/{id}:
    parameters:
      - description: The message unique indentifier.
        in: path
        name: id
        required: true
        schema:
          type: string
    get:
      summary: Get a message by id.
      tags:
        - Messages
      responses:
        '200':
          description: The message object representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: The message was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Unexpected Error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

components:
  schemas:
    User:
      description: The user representation.
      type: object
      properties:
        id:
          description: The unique indentifier of the object.
          readOnly: true
          type: string
        budget:
          description: The remaining budget to send messages.
          example: 10
          format: int64
          type: integer
          readOnly: true
        name:
          description: The human readable name of the user.
          example: Peter Gibbons
          type: string
        username:
          description: The unique name of the user.
          example: peter.gibbons
          type: string
          pattern: '^[a-z][a-z_\.\-0-9]*$'
        createdAt:
          description: The UTC date and time user has been created.
          format: date-time
          readOnly: true
          type: string
        updatedAt:
          description: The UTC date and time user has been updated.
          format: date-time
          readOnly: true
          type: string
      required:
        - id
        - budget
        - name
        - username
        - createdAt
        - updatedAt

    Message:
      description: The message representation.
      type: object
      properties:
        id:
          description: The unique indentifier of the object.
          readOnly: true
          type: string
        from:
          description: The sender user id.
          type: string
        to:
          description: The recipient user id.
          type: string
        body:
          description: The message body content.
          type: string
          minLength: 1
          maxLength: 280
        sentAt:
          description: The UTC date and time message was sent.
          format: date-time
          readOnly: true
          type: string

    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized).
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
        details:
          description: |
            A list of human readable explanation specific to this occurrence
            of the problem.
          type: array
          items:
            format: string
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
      required:
        - status
        - title
